<?php
$param = $block->getRequest()->getParams();
$storeCode = $block->getStoreCode();

if (array_key_exists('chromepay', $param)) {
    ?>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
        var request = initPaymentRequest();
        onBuyClicked(request);
        }, false);</script>

    <?php
}

$myaccountexception = $block->getMyAccountSpecificException('MCAM8') ;
$ccexception = $block->getCreditCardSpecificException('CCAM12');
if (array_key_exists('error', $param)) {
    if (array_key_exists('message', $param)) {
        $block->_messageManager->addError(__($ccexception));
    } else {
        $block->_messageManager->addError(__($myaccountexception));
    }
}

$cusToken = 'Bearer ' . $block->getCustomerToken();

/** @var $block \Sapient\Worldpay\Block\Webpayment */
?>

<script type="text/javascript">
    window.ChromepayButtonName = '<?= /* @noEscape */ $block->getChromepayButtonName() ?>';
    window.ChromepayEnabled = '<?= /* @noEscape */ $block->getChromepayEnabled() ?>';
    window.ChromePaymentMode = '<?= /* @noEscape */ $block->getPaymentMode() ?>';
    window.SubscriptionStatus = '<?= /* @noEscape */ $block->checkSubscriptionItems() ?>'
    window.GeneralExceptions = '<?= /* @noEscape */ $block->getGeneralException() ?>'
    window.MyAccountExceptions = '<?= /* @noEscape */ $block->MyAccountExceptions() ?>';
    window.CreditCardException = '<?= /* @noEscape */ $block->getCreditCardException() ?>';
    window.isDynamic3DS2Enabled = '<?= /* @noEscape */ $block->isDynamic3DS2Enabled() ?>';
    window.jwtEventUrl = '<?= /* @noEscape */ $block->getJwtEventUrl() ?>';
    var envMode = '<?= /* @noEscape */ $block->getEnvMode() ?>';
    
    if(envMode == 'Test Mode') {
        document.cookie = "envMode=Test Mode; path=/";
    }else{
        document.cookie = "envMode=Live Mode; path=/";
    }
    
    var browserType = window.navigator.userAgent.match(/chrome/i);
    var browserEdge = window.navigator.userAgent.match(/edge/i);

    if((browserType && browserType[0] == 'Chrome') && !browserEdge) {
        window.ChromepayAvailable = '1';
    }else{
        window.ChromepayAvailable = '0';
    }

</script>

<script>
    //Global variables
    var carrierCode;
    var token = '<?= /* @noEscape */ $cusToken ?>';
    var cardType;
    var totalAmount;
    var baseUrl = '<?= /* @noEscape */ $block->getBaseUrl() ?>';
    var baseCurrency = '<?= /* @noEscape */ $block->getCurrency() ?>';
    var orderCode;
    var reqShipping = '<?= /* @noEscape */ $block->getshippingRequired() ?>';
    var session ='';
    var cseData = {};
    function initPaymentRequest() {

    const networks = [
            "amex", "mastercard", "visa"
    ];
    const types = ['credit'];
    const supportedInstruments = [{
    supportedMethods: 'basic-card',
            data: {
            supportedNetworks: networks,
                    supportedTypes: types
            }
    }];
    var isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
    var guestMaskedQuoteId = window.checkoutConfig.quoteData.entity_id;
    var isDownlodable = <?= /* @noEscape */ $block->checkDownloadableProduct() ?>;
    const details = {
    displayItems: [

<?php foreach ($block->getAllItems() as $item) { ?>
        {
        label: "<?= /* @noEscape */ $item->getData('name') ?>",
                amount: { currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
            value: '<?= /* @noEscape */ $item->getData('price') ?>' }
        },
<?php } ?>

    {
    label: 'Subtotal',
            amount: { currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                value: '<?= /* @noEscape */ $block->getSubTotal() ?>' }
    },
    {
    label: 'Shipping',
            amount: {currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                value: '<?= /* @noEscape */ $block->getShippingRate() ?>'},
            pending: true,
    },
    {
    label: 'Tax',
            amount: {currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                value: '<?= /* @noEscape */ $block->getTaxRate() ?>'},
            pending: true,
    },
    {
    label: 'Discount',
            amount: {currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                value: '<?= /* @noEscape */ $block->getDiscountRate() ?>'},
            pending: true,
    },
    ],
            total: {
            label: 'Total',
                    amount: { currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                    value: '<?= /* @noEscape */ $block->getTotal() ?>' }
            },
    };  
    var options = {
    requestShipping: reqShipping,
            requestPayerEmail: true,
            requestPayerPhone: true,
            requestPayerName: true
    }; 
    /**
     * Updates the shipping price and the total based on the shipping address.
     *
     * @private
     * @param {PaymentDetails} details The line items and shipping options.
     * @param {PaymentAddress} shippingAddress User's preferred shipping address to
     * use for shipping price calculations.
     * @param {function} callback The callback to invoke with updated line items and
     * shipping options.
     */

    //ajax req for available shipping method

    function updateDetails(details, shippingOption, shippingAddress, resolve, reject) {
        var k;
        var selectedOptIndex;
        for (k = 0; k < details.shippingOptions.length; k++) {
         details.shippingOptions[k].selected = false;
        if (details.shippingOptions[k].id == shippingOption) {
        selectedOptIndex = k;
        //break;
        }
        }

        carrierCode = details.shippingOptions[selectedOptIndex].carrier;
        var newShippingAmount = Number(details.shippingOptions[selectedOptIndex].amount.value);
        var newTotal = Number(<?= /* @noEscape */ $block->getSubTotal() ?>) + newShippingAmount;
        selectedShippingOption = details.shippingOptions[selectedOptIndex];
        var productCount = Number(<?= /* @noEscape */ $block->getProductCount() ?>);
        var shippingPosition = Number(productCount + 1);
        details.total.amount.value = newTotal;
        totalAmount = newTotal;
        details.displayItems[shippingPosition].amount.value = newShippingAmount;
        selectedShippingOption.selected = true;
        var totals = updateTotals(carrierCode, shippingAddress,shippingOption);
        if(totals){            
            var taxPosition = Number(productCount + 2);
            details.displayItems[taxPosition].amount.value = totals.base_tax_amount;
            // Update total after tax
            details.total.amount.value = totals.base_grand_total;
        }
        resolve(details);
    }  // end of updateDetails fn
    
    function updateTotals(carrierCode, shippingAddress,shippingOption){
        var countryCode = shippingAddress.country;
        var req = {
            'addressInformation' : {
                'address' : {
                    'countryId' : countryCode,
                    'region': shippingAddress.region,
                    'postcode':shippingAddress.postalCode
                },
                'shipping_method_code' : shippingOption,
                'shipping_carrier_code' : carrierCode
            }
        }
        var jsonReq = JSON.stringify(req);
        var totalsUrl;
        if (isCustomerLoggedIn) { //Api for logged inb customer
            totalsUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/carts/mine/totals-information';
        } else { // Api for guest customer
            totalsUrl = baseUrl + 'rest/<?= /* @noEscape */  $storeCode; ?>/V1/guest-carts/' + 
                    guestMaskedQuoteId + '/totals-information';
        }
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", totalsUrl, false);
        xhttp.setRequestHeader("Content-type", "application/json");
        if (isCustomerLoggedIn) {
        xhttp.setRequestHeader("Authorization", token);
        }
        xhttp.send(jsonReq);
        var totals = JSON.parse(xhttp.responseText);
        return totals;
    } //--------------end of updateTotals fn -----------
    

    function updateDetailsAddress(details, request, resolve, reject) {
        var countryCode = request.country;
        var req = {
        'address' : {
        'country_id' : ''
        }
        };
        req.address.country_id = request.country;
        var jsonReq = JSON.stringify(req);
        var apiUrl;
        if (isCustomerLoggedIn) { //Api for logged inb customer
            apiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/carts/mine/estimate-shipping-methods';
        } else { // Api for guest customer
            apiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/guest-carts/' + 
                    guestMaskedQuoteId + '/estimate-shipping-methods';
        }
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", apiUrl, false);
        xhttp.setRequestHeader("Content-type", "application/json");
        if (isCustomerLoggedIn) {
        xhttp.setRequestHeader("Authorization", token);
        }
        xhttp.send(jsonReq);
        var shippindMethods = JSON.parse(xhttp.responseText);
        var shippingOptionsNew = [];
        for (i = 0; i < shippindMethods.length; i++) {
        shippingOptionsNew.push({
        id: shippindMethods[i].method_code,
                label: shippindMethods[i].carrier_title,
                carrier: shippindMethods[i].carrier_code,
                amount: {currency: '<?= /* @noEscape */ $block->getCurrency() ?>', 
                    value: shippindMethods[i].amount},
                selected: false,
        });
        }
        details.shippingOptions = shippingOptionsNew;
        resolve(details);
    } //--------------- end of updateDetailsAddress -------------


    // Initialization
    var request = new PaymentRequest(supportedInstruments, details, options);
    request.addEventListener('shippingaddresschange', function(evt) {
        evt.updateWith(new Promise(function(resolve, reject) {
            updateDetailsAddress(details, request.shippingAddress, resolve, reject);
        }));
    });
    //Update shipping rate by selected shipping method
    request.addEventListener('shippingoptionchange', function(evt) {
        evt.updateWith(new Promise(function(resolve, reject) {
            updateDetails(details, request.shippingOption, request.shippingAddress, resolve, reject);
        }));
    });
    return request;
    } // ------------- End of initPaymentRequest fn ---------------

    var jwtUrl = baseUrl +'worldpay/hostedpaymentpage/jwt';
        
        function createJwt(cardNumber){
            var bin = cardNumber;
            var encryptedBin = btoa(bin);
            var iframe = document.createElement('iframe');
            iframe.src =jwtUrl+'?instrument='+encryptedBin;
            iframe.name="jwt_frm";
            iframe.id="jwt_frm";
            iframe.style.display = "none";
            document.body.appendChild(iframe);
        }
        
        function isClientSideEncryptionEnabled() {
                if (getCsePublicKey()) {
                    return window.checkoutConfig.payment.ccform.cseEnabled;
                }
                return false;
            }
    
        function getCsePublicKey (){
                return window.checkoutConfig.payment.ccform.csePublicKey;
            }
        
        function placeOrder(instrumentResponse) {
            orderCode = createOrder(instrumentResponse);
            if (instrumentResponse && orderCode){
           // window.location.href = baseUrl + 'checkout/onepage/success';
            window.location.href = baseUrl + 'worldpay/threedsecure/auth';
        }
        }
    /**
     * Invokes PaymentRequest for credit cards.
     *
     * @param {PaymentRequest} request The PaymentRequest object.
     */
    function onBuyClicked(request) {

    var isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
    var isDownlodable = <?= /* @noEscape */ $block->checkDownloadableProduct() ?>;
    if (isCustomerLoggedIn == false && isDownlodable == true) {
        var error = 'Please log in to continue';
        alert(error);
        throw(error);
    }

    request.show().then(function(instrumentResponse) {
       //Client-Side encryption 
        if(isClientSideEncryptionEnabled()){
            require(["https://payments.worldpay.com/resources/cse/js/worldpay-cse-1.0.2.min.js"], function (worldpay) {
                worldpay.setPublicKey(getCsePublicKey());
                cseData = {
                            cardNumber : instrumentResponse.details.cardNumber,
                            cvc : instrumentResponse.details.cardSecurityCode,
                            cardHolderName : instrumentResponse.details.cardholderName,
                            expiryMonth : instrumentResponse.details.expiryMonth,
                            expiryYear : instrumentResponse.details.expiryYear
                            };
                var encryptedData = worldpay.encrypt(cseData);
                cseData = encryptedData;
                if (window.isDynamic3DS2Enabled) {
                    var bin = instrumentResponse.details.cardNumber;;
                    var binNew = bin.substring(0,6);
                    createJwt(binNew);
                    window.sessionId ='<?= /* @noEscape */ $block->getSessionId(); ?>';
        
                    window.addEventListener("message", function(event) {
                    var data = JSON.parse(event.data);

                    var envUrl;
                    if(window.jwtEventUrl !== '') {
                        envUrl = window.jwtEventUrl;
                        }
                    if (event.origin === envUrl) {
                                        
                        var data = JSON.parse(event.data);
                            //console.warn('Merchant received a message:', data);
                            if (data !== undefined && data.Status) {
                                //window.sessionId = data.SessionId;
                                var sessionId = data.SessionId;
                                if(sessionId) {
                                    dfReferenceId = sessionId;
                                    }
                                window.sessionId = dfReferenceId;
                                placeOrder(instrumentResponse);
                                            
                                    }
                                }
                            }, false);          
                        } else {
                                placeOrder(instrumentResponse);
                            }
                    } );
       } else if (window.isDynamic3DS2Enabled) {
        var bin = instrumentResponse.details.cardNumber;;
        var binNew = bin.substring(0,6);
        createJwt(binNew);
        window.sessionId ='<?= /* @noEscape */ $block->getSessionId(); ?>';
        
        window.addEventListener("message", function(event) {
            var data = JSON.parse(event.data);

            var envUrl;
            if(window.jwtEventUrl !== '') {
                envUrl = window.jwtEventUrl;
            }
            if (event.origin === envUrl) {
                                        
                var data = JSON.parse(event.data);
                    //console.warn('Merchant received a message:', data);
                if (data !== undefined && data.Status) {
                    //window.sessionId = data.SessionId;
                    var sessionId = data.SessionId;
                    if(sessionId) {
                        dfReferenceId = sessionId;
                    }
                    window.sessionId = dfReferenceId;
                    //place order with direct CSE method
                    placeOrder(instrumentResponse);
                                            
                    }
                }
            }, false);
    }else {
         placeOrder(instrumentResponse);
    }
        //console.log('order created');
        //console.log(orderCode);
        //console.log('REDIRECTING');

    }).catch(function(err) {
        throw(err);
    });
    } // ----------------- End of onBuyClicked fn --------------------

    /**
     * Simulates processing the payment data on the server.
     *
     * @param {instrumentResponse} instrumentResponse The payment information to
     * process.
     */
    function createOrder(instrumentResponse) {
    var guestMaskedQuoteId = window.checkoutConfig.quoteData.entity_id;
    var apiUrl;
    var orderResponse;
    var dfReferenceId = "";
    if (isCustomerLoggedIn) { //Api for logged in customer
        apiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/carts/mine/shipping-information';
    } else { // Api for guest customer
        apiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/guest-carts/' + 
                guestMaskedQuoteId + '/shipping-information';
    }
    
    
    var fullName = instrumentResponse.details.billingAddress.recipient;
    var strArray = fullName.split(" ");
    var firstName = strArray[0];
    var lastName;
    //firstname will be used as lastname incase user dont have lastname (Magento validation)
    if (strArray[1]) {
    lastName = strArray[1];
    } else {
    lastName = firstName;
    }

    //Add shipping information to the cart
    // region id will be used as 0 as default (Magento validation)
    var customerDetails = {  "addressInformation": {
    "shipping_address": {
    "region": "",
            "region_id": 0,
            "region_code": "",
            "country_id": "",
            "street": [
                    ""
            ],
            "postcode": "",
            "city": "",
            "firstname": "",
            "lastname": "",
            "email": "",
            "telephone": ""
    },
            "billing_address": {
            "email": instrumentResponse.payerEmail,
                    "region": instrumentResponse.details.billingAddress.region,
                    "region_id": 0,
                    "region_code": instrumentResponse.details.billingAddress.region,
                    "country_id": instrumentResponse.details.billingAddress.country,
                    "street": instrumentResponse.details.billingAddress.addressLine,
                    "postcode": instrumentResponse.details.billingAddress.postalCode,
                    "city": instrumentResponse.details.billingAddress.city,
                    "telephone": instrumentResponse.details.billingAddress.phone,
                    "firstname": firstName,
                    "lastname": lastName
            },
            "shipping_carrier_code": "",
            "shipping_method_code": ""
    }
    }

    if (instrumentResponse.shippingAddress) {
    //shipping information
    customerDetails.addressInformation.shipping_address.region = instrumentResponse.shippingAddress.region;
    customerDetails.addressInformation.shipping_address.region_id = 0;
    customerDetails.addressInformation.shipping_address.region_code = instrumentResponse.shippingAddress.region;
    customerDetails.addressInformation.shipping_address.country_id = instrumentResponse.shippingAddress.country;
    customerDetails.addressInformation.shipping_address.street = instrumentResponse.shippingAddress.addressLine;
    customerDetails.addressInformation.shipping_address.postcode = instrumentResponse.shippingAddress.postalCode;
    customerDetails.addressInformation.shipping_address.city = instrumentResponse.shippingAddress.city;
    customerDetails.addressInformation.shipping_address.telephone = instrumentResponse.shippingAddress.phone;
    customerDetails.addressInformation.shipping_address.firstname = firstName;
    customerDetails.addressInformation.shipping_address.lastname = lastName;
    }

    //Shipping information
    customerDetails.addressInformation.shipping_carrier_code = carrierCode;
    customerDetails.addressInformation.shipping_method_code = instrumentResponse.shippingOption;
    
    var jsonCustomerDetails = JSON.stringify(customerDetails);
    let cardNo = instrumentResponse.details.cardNumber;
    //Get the card type
    cardType = getCardType(cardNo);
    if (instrumentResponse.shippingAddress) {
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", apiUrl, false);
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.setRequestHeader("Authorization", token);
    xhttp.send(jsonCustomerDetails);
    }
 
    //card details
    let cardNumber = instrumentResponse.details.cardNumber;
    let cvc = instrumentResponse.details.cardSecurityCode;
    let cardholderName = instrumentResponse.details.cardholderName;
    let expiryMonth = instrumentResponse.details.expiryMonth;
    let expiryYear = instrumentResponse.details.expiryYear;
    let encyptedCseData = cseData.length>0 ? cseData : null;
     
    //Add payment information and place the order
    var paymentDetails = {
    "paymentMethod": {
    "method": "worldpay_cc",
            "additional_data": {
            "cc_cid" : cvc,
                    "cc_type" : cardType,
                    "cc_exp_year" : expiryYear,
                    "cc_exp_month" : expiryMonth,
                    "cc_number" : cardNumber,
                    "cc_name" : cardholderName,
                    "save_my_card" : false,
                    "cse_enabled" : isClientSideEncryptionEnabled(),
                    "encryptedData" : encyptedCseData,
                    "tokenCode" : null,
                    "isSavedCardPayment" : false,
                    "isChromePay" : "1",
                    "dfReferenceId": window.sessionId
            }
    },
            "billing_address": {
            "email": instrumentResponse.payerEmail,
                    "region": instrumentResponse.details.billingAddress.city,
                    "region_id": 0,
                    "region_code": instrumentResponse.details.billingAddress.region,
                    "country_id": instrumentResponse.details.billingAddress.country,
                    "street": instrumentResponse.details.billingAddress.addressLine,
                    "postcode": instrumentResponse.details.billingAddress.postalCode,
                    "city": instrumentResponse.details.billingAddress.city,
                    "telephone": instrumentResponse.details.billingAddress.phone,
                    "firstname": firstName,
                    "lastname": lastName
            }
    };
    var jsonPaymentDetails = JSON.stringify(paymentDetails);
    var orderApiUrl;
    if (isCustomerLoggedIn) { //Api for logged in customer
    orderApiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/carts/mine/payment-information';
    } else { // Api for guest customer
    orderApiUrl = baseUrl + 'rest/<?= /* @noEscape */ $storeCode; ?>/V1/guest-carts/' + guestMaskedQuoteId + '/order';
    }

    var xhttp = new XMLHttpRequest();
    if (isCustomerLoggedIn) {
    xhttp.open("POST", orderApiUrl, false);
    } else {
    xhttp.open("PUT", orderApiUrl, false);
    }
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.setRequestHeader("Authorization", token);
    xhttp.send(jsonPaymentDetails);
    var orderResponse = JSON.parse(xhttp.responseText);
    //console.log("Response-->"+orderResponse['message']);
   
   if(isNaN(orderResponse)){
       if(orderResponse.hasOwnProperty("message") && orderResponse['message'].indexOf('3DS2')!==-1) {
         window.location.href = baseUrl + 'checkout/cart?error=true&message=error';
           exit;
       }
        window.location.href = baseUrl + 'checkout/cart?error=true';
        exit;
    }
   
    return orderResponse;
    }// --------------------- end of createOrder ----------------

    function getCardType(cardNumber) {
    // visa
    var re = new RegExp("^4");
    if (cardNumber.match(re) != null)
            return "VISA-SSL";
    // Mastercard 
    // Updated for Mastercard 2017 BINs expansion
    var binExps = /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/;
    if (binExps.test(cardNumber))
            return "ECMC-SSL";
    // AMEX
    re = new RegExp("^3[47]");
    if (cardNumber.match(re) != null)
            return "AMEX-SSL";
    // Discover
    re = new RegExp("^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)");
    if (cardNumber.match(re) != null)
            return "DISCOVER-SSL";
    // Diners
    re = new RegExp("^36");
    if (cardNumber.match(re) != null)
            return "DINERS-SSL";
    // Diners - Carte Blanche
    re = new RegExp("^30[0-5]");
    if (cardNumber.match(re) != null)
            return "DINERS-SSL";
    // JCB
    re = new RegExp("^35(2[89]|[3-8][0-9])");
    if (cardNumber.match(re) != null)
            return "JCB-SSL";
    // Visa Electron
    re = new RegExp("^(4026|417500|4508|4844|491(3|7))");
    if (cardNumber.match(re) != null)
            return "VISA-SET";
    re = new RegExp("^62|88");
    if (cardNumber.match(re) != null)
            return "CHINAUNIONPAY-SSL";
    return "";
    } //end of getCardType
</script>